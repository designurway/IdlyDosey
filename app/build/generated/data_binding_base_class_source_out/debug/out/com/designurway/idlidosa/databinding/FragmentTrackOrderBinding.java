// Generated by view binder compiler. Do not edit!
package com.designurway.idlidosa.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.designurway.idlidosa.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentTrackOrderBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout cardTrackorder;

  @NonNull
  public final ImageView imageCircleNow;

  @NonNull
  public final ImageView imageLine1;

  @NonNull
  public final ImageView imageLine2;

  @NonNull
  public final ImageView imageNext;

  @NonNull
  public final ImageView imgCompt;

  @NonNull
  public final ImageView imgDotCpmt;

  @NonNull
  public final ImageView imgDotDispatchNext;

  @NonNull
  public final ImageView imgRecieved;

  @NonNull
  public final LinearLayout linearComp;

  @NonNull
  public final LinearLayout linearComplet;

  @NonNull
  public final LinearLayout linearDisp;

  @NonNull
  public final LinearLayout linearDispatched;

  @NonNull
  public final LinearLayout linearReady;

  @NonNull
  public final LinearLayout linearRecieved;

  @NonNull
  public final TextView textCmpt;

  @NonNull
  public final TextView textDelivered;

  @NonNull
  public final TextView txtDispatch;

  @NonNull
  public final TextView txtOnUrWay;

  @NonNull
  public final TextView txtPreparing;

  @NonNull
  public final TextView txtRecived;

  private FragmentTrackOrderBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout cardTrackorder, @NonNull ImageView imageCircleNow,
      @NonNull ImageView imageLine1, @NonNull ImageView imageLine2, @NonNull ImageView imageNext,
      @NonNull ImageView imgCompt, @NonNull ImageView imgDotCpmt,
      @NonNull ImageView imgDotDispatchNext, @NonNull ImageView imgRecieved,
      @NonNull LinearLayout linearComp, @NonNull LinearLayout linearComplet,
      @NonNull LinearLayout linearDisp, @NonNull LinearLayout linearDispatched,
      @NonNull LinearLayout linearReady, @NonNull LinearLayout linearRecieved,
      @NonNull TextView textCmpt, @NonNull TextView textDelivered, @NonNull TextView txtDispatch,
      @NonNull TextView txtOnUrWay, @NonNull TextView txtPreparing, @NonNull TextView txtRecived) {
    this.rootView = rootView;
    this.cardTrackorder = cardTrackorder;
    this.imageCircleNow = imageCircleNow;
    this.imageLine1 = imageLine1;
    this.imageLine2 = imageLine2;
    this.imageNext = imageNext;
    this.imgCompt = imgCompt;
    this.imgDotCpmt = imgDotCpmt;
    this.imgDotDispatchNext = imgDotDispatchNext;
    this.imgRecieved = imgRecieved;
    this.linearComp = linearComp;
    this.linearComplet = linearComplet;
    this.linearDisp = linearDisp;
    this.linearDispatched = linearDispatched;
    this.linearReady = linearReady;
    this.linearRecieved = linearRecieved;
    this.textCmpt = textCmpt;
    this.textDelivered = textDelivered;
    this.txtDispatch = txtDispatch;
    this.txtOnUrWay = txtOnUrWay;
    this.txtPreparing = txtPreparing;
    this.txtRecived = txtRecived;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentTrackOrderBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentTrackOrderBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_track_order, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentTrackOrderBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.card_trackorder;
      ConstraintLayout cardTrackorder = rootView.findViewById(id);
      if (cardTrackorder == null) {
        break missingId;
      }

      id = R.id.image_circle_now;
      ImageView imageCircleNow = rootView.findViewById(id);
      if (imageCircleNow == null) {
        break missingId;
      }

      id = R.id.image_line1;
      ImageView imageLine1 = rootView.findViewById(id);
      if (imageLine1 == null) {
        break missingId;
      }

      id = R.id.image_line2;
      ImageView imageLine2 = rootView.findViewById(id);
      if (imageLine2 == null) {
        break missingId;
      }

      id = R.id.image_next;
      ImageView imageNext = rootView.findViewById(id);
      if (imageNext == null) {
        break missingId;
      }

      id = R.id.img_compt;
      ImageView imgCompt = rootView.findViewById(id);
      if (imgCompt == null) {
        break missingId;
      }

      id = R.id.img_dot_cpmt;
      ImageView imgDotCpmt = rootView.findViewById(id);
      if (imgDotCpmt == null) {
        break missingId;
      }

      id = R.id.img_dot_dispatch_next;
      ImageView imgDotDispatchNext = rootView.findViewById(id);
      if (imgDotDispatchNext == null) {
        break missingId;
      }

      id = R.id.img_recieved;
      ImageView imgRecieved = rootView.findViewById(id);
      if (imgRecieved == null) {
        break missingId;
      }

      id = R.id.linear_comp;
      LinearLayout linearComp = rootView.findViewById(id);
      if (linearComp == null) {
        break missingId;
      }

      id = R.id.linear_complet;
      LinearLayout linearComplet = rootView.findViewById(id);
      if (linearComplet == null) {
        break missingId;
      }

      id = R.id.linear_disp;
      LinearLayout linearDisp = rootView.findViewById(id);
      if (linearDisp == null) {
        break missingId;
      }

      id = R.id.linear_dispatched;
      LinearLayout linearDispatched = rootView.findViewById(id);
      if (linearDispatched == null) {
        break missingId;
      }

      id = R.id.linear_ready;
      LinearLayout linearReady = rootView.findViewById(id);
      if (linearReady == null) {
        break missingId;
      }

      id = R.id.linear_recieved;
      LinearLayout linearRecieved = rootView.findViewById(id);
      if (linearRecieved == null) {
        break missingId;
      }

      id = R.id.text_cmpt;
      TextView textCmpt = rootView.findViewById(id);
      if (textCmpt == null) {
        break missingId;
      }

      id = R.id.text_delivered;
      TextView textDelivered = rootView.findViewById(id);
      if (textDelivered == null) {
        break missingId;
      }

      id = R.id.txt_dispatch;
      TextView txtDispatch = rootView.findViewById(id);
      if (txtDispatch == null) {
        break missingId;
      }

      id = R.id.txt_on_ur_way;
      TextView txtOnUrWay = rootView.findViewById(id);
      if (txtOnUrWay == null) {
        break missingId;
      }

      id = R.id.txt_preparing;
      TextView txtPreparing = rootView.findViewById(id);
      if (txtPreparing == null) {
        break missingId;
      }

      id = R.id.txt_recived;
      TextView txtRecived = rootView.findViewById(id);
      if (txtRecived == null) {
        break missingId;
      }

      return new FragmentTrackOrderBinding((ConstraintLayout) rootView, cardTrackorder,
          imageCircleNow, imageLine1, imageLine2, imageNext, imgCompt, imgDotCpmt,
          imgDotDispatchNext, imgRecieved, linearComp, linearComplet, linearDisp, linearDispatched,
          linearReady, linearRecieved, textCmpt, textDelivered, txtDispatch, txtOnUrWay,
          txtPreparing, txtRecived);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
